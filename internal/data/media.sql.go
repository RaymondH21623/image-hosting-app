// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package data

import (
	"context"

	"github.com/google/uuid"
)

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (user_id, slug, filename, mime_type, size)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, slug, filename, mime_type, size, created_at
`

type CreateMediaParams struct {
	UserID   uuid.UUID
	Slug     string
	Filename string
	MimeType string
	Size     int64
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRowContext(ctx, createMedia,
		arg.UserID,
		arg.Slug,
		arg.Filename,
		arg.MimeType,
		arg.Size,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Filename,
		&i.MimeType,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const getMediaBySlug = `-- name: GetMediaBySlug :one
SELECT id, user_id, slug, filename, mime_type, size, created_at FROM media WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetMediaBySlug(ctx context.Context, slug string) (Medium, error) {
	row := q.db.QueryRowContext(ctx, getMediaBySlug, slug)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.Filename,
		&i.MimeType,
		&i.Size,
		&i.CreatedAt,
	)
	return i, err
}

const listMediaByUser = `-- name: ListMediaByUser :many
SELECT id, user_id, slug, filename, mime_type, size, created_at FROM media WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListMediaByUser(ctx context.Context, userID uuid.UUID) ([]Medium, error) {
	rows, err := q.db.QueryContext(ctx, listMediaByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Slug,
			&i.Filename,
			&i.MimeType,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
